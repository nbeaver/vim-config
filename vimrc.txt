" From example .vimrc file at /usr/share/vim/vimcurrent/vimrc_example.vim

set incsearch		" do incremental searching

" Only do this part when compiled with support for autocommands.
if has("autocmd")
  " Enable file type detection.
  " Use the default filetype settings, so that mail gets 'tw' set to 72,
  " 'cindent' is on in C files, etc.
  " Also load indent files, to automatically do language-dependent indenting.
  filetype plugin indent on
else
  set autoindent		" always set autoindenting on
endif
" =============================================================================
" My customizations start here.

set autochdir
" Automatically work with directory the file is in,
" not the directory `vim` is invoked from.

syntax on
" Always enable syntax highlighting.

" set isfname+=32 " turned off for now until I can find a better solution.
" Make spaces a valid separator in filenames.
" Affects commands like `gf` and i_Ctrl-X Ctrl-F.
" Caveat from Vim manual:
"     Think twice before adding white space to this option.  Although a
"     space may appear inside a file name, the effect will be that Vim
"     doesn't know where a file name starts or ends when doing completion.
"     It most likely works better without a space in 'isfname'.
"

set nostartofline
" Prevent vim from jumping to the start of line when using e.g. Ctrl-F or G

if has('autocmd')
    autocmd BufNewFile,BufRead *.py set softtabstop=4 shiftwidth=4 expandtab smartindent
    " For some reason, vim's python plugin doesn't use spaces for indentation.
    " https://www.python.org/dev/peps/pep-0008/#indentation
    " http://stackoverflow.com/questions/5998374/if-filetype-tex
    
    autocmd BufNewFile,BufRead *.sh set softtabstop=4 shiftwidth=4 expandtab smartindent
    " Do the same indentation for shell scripts.
    
    " Vim only recognizes *.gpi as gnuplot files by default.
    autocmd BufNewFile,BufRead *.plt setf gnuplot
    autocmd BufNewFile,BufRead *.gnuplot setf gnuplot
    autocmd BufNewFile,BufRead *.gnu setf gnuplot
    autocmd BufNewFile,BufRead *.gp setf gnuplot
endif

" ---------------------- Begin vimhelp file modifications. -------------------
if has('autocmd')
    autocmd BufNewFile,BufRead *.vimhelp set buftype=help
    " This is necessary to follow tags that start with [ and /,
    " e.g. E426: tag not found: \[count]
    " e.g. |/star| jumps to *star*, not */star*.
    " e.g. |/ignorecase| jumps to *'ignorecase'*
    " |/atom| |/bar| |/\bar|
    " but it has some drawbacks, e.g. :help will leave the current buffer,
    " so use :split | :help instead.
    "autocmd BufNewFile,BufRead *.vimhelp cnoremap :help :split\|help TODO: fix this.
    
    let b:did_ftplugin = 1
    " Nasty hack that lets us avoid the side effects of the help filetype plugin,
    " which will somehow be called last by the 'set buftype=help' above.
    " (See /usr/share/vim/vimcurrent/ftplugin/help.vim for the plugin.)
    
    autocmd BufNewFile,BufRead *.vimhelp setlocal iskeyword=!-~,^\*,^\|,^\",192-255
    " Make the keywords match other help files,
    " so tags like |command-mode| don't jump to *:command*
    " and tags like |%| don't throw "E349: No identifier under cursor".
    
    autocmd BufNewFile,BufRead *.vimhelp setlocal noreadonly
    autocmd BufNewFile,BufRead *.vimhelp setlocal modifiable
    " Stop the file from being read-only, which is default for buftype=help.
    
    autocmd BufNewFile,BufRead *.vimhelp setlocal textwidth=0
    autocmd BufNewFile,BufRead *.vimhelp set formatoptions-=tc
    " Prevent autowrapping at 78 characters, which is default for buftype=help.
    
    autocmd BufNewFile,BufRead *.vimhelp highlight link helpStar Type
    " Make the ** characters in a tag target visible.
    
    autocmd BufNewFile,BufRead *.vimhelp highlight link helpBar Type
    " Make the || characters in a tag visible.
    
    autocmd BufNewFile,BufRead *.vimhelp highlight link helpIgnore Type
    " Make the > and < to begin and end examples visible.
    
    " Note: see color with :highlight Type
endif
" ---------------------- End vimhelp file modifications. ---------------------

map <F10> :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
\ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
\ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>
" http://vim.wikia.com/wiki/Identify_the_syntax_highlighting_group_used_at_the_cursor

" http://mg.pov.lt/vim/vimrc

" When Vim highlights the matching bracket,
" I have a hard time keeping track of which character the cursor is on.
highlight MatchParen cterm=bold ctermbg=none ctermfg=none
" https://stackoverflow.com/questions/10746750/set-vim-bracket-highlighting-colors

" Automatically source .vimrc when writing this file.
" 'the grouping of autocommand is here to avoid "exponential" reloading if you save several times your configuration.'
augroup myvimrc
    autocmd!
    autocmd BufWritePost .vimrc,_vimrc,vimrc,.gvimrc,_gvimrc,gvimrc source $MYVIMRC | if has('gui_running') | source $MYGVIMRC | endif
augroup END
" https://stackoverflow.com/questions/2400264/is-it-possible-to-apply-vim-configurations-without-restarting/2403926#2403926
